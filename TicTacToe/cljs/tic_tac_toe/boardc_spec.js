// Compiled by ClojureScript 1.11.132 {:optimizations :none}
goog.provide('tic_tac_toe.boardc_spec');
goog.require('cljs.core');
goog.require('speclj.core');
goog.require('tic_tac_toe.boardc');
goog.require('tic_tac_toe.spec_helperc');
speclj.core.describe.call(null,"board",speclj.core.context.call(null,"get-active-player",speclj.core.it.call(null,"returns O if there are mores Xs on the board",speclj.core.should_EQ_.call(null,"O",tic_tac_toe.boardc.get_active_player.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X","X","O"], null)))),speclj.core.it.call(null,"returns X if there are more O's on the board",speclj.core.should_EQ_.call(null,"X",tic_tac_toe.boardc.get_active_player.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["O","O","X"], null)))),speclj.core.it.call(null,"returns X if there are equal X's and O's",speclj.core.should_EQ_.call(null,"X",tic_tac_toe.boardc.get_active_player.call(null,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X","X","O","O"], null))))),speclj.core.context.call(null,"get-available-moves",speclj.core.it.call(null,"returns all moves if all moves are available",speclj.core.should_EQ_.call(null,cljs.core.range.call(null,(9)),tic_tac_toe.boardc.get_available_moves.call(null,cljs.core.range.call(null,(9))))),speclj.core.it.call(null,"returns no moves if no moves are available",speclj.core.should_EQ_.call(null,cljs.core.PersistentVector.EMPTY,tic_tac_toe.boardc.get_available_moves.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X","X","O","O","X","X","O","O","X"], null)))),speclj.core.it.call(null,"returns just the available moves",speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(3),(6)], null),tic_tac_toe.boardc.get_available_moves.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X",(1),"O",(3),"X","X",(6),"O","X"], null))),speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(5),(6),(7),(8)], null),tic_tac_toe.boardc.get_available_moves.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["O","O",(2),"X","X",(5),(6),(7),(8)], null))))),speclj.core.context.call(null,"update-board",speclj.core.it.call(null,"finds active player and plays selection on board",speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X",(1),(2),(3),(4),(5),(6),(7),(8)], null),tic_tac_toe.boardc.update_board.call(null,(0),cljs.core.range.call(null,(9))))),speclj.core.it.call(null,"finds active player and turns selection into active player.",speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X",(1),"O",(3),(4),(5),(6),(7),(8)], null),tic_tac_toe.boardc.update_board.call(null,(2),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X",(1),(2),(3),(4),(5),(6),(7),(8)], null)))),speclj.core.it.call(null,"if given 3 arguments, puts player-token on board ",speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X",(1),"X",(3),(4),(5),(6),(7),(8)], null),tic_tac_toe.boardc.update_board.call(null,"X",(2),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X",(1),(2),(3),(4),(5),(6),(7),(8)], null))))),speclj.core.context.call(null,"rotate-plane-x",speclj.core.it.call(null,"makes a sideways plane",(function (){var plane_0 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(24),(15),(6),(21),(12),(3),(18),(9),(0)], null);
var plane_1 = cljs.core.map.call(null,cljs.core.inc,plane_0);
var plane_2 = cljs.core.map.call(null,cljs.core.inc,plane_1);
speclj.core.should_EQ_.call(null,plane_0,tic_tac_toe.boardc.rotate_plane_x.call(null,cljs.core.range.call(null,(27)),(0)));

speclj.core.should_EQ_.call(null,plane_1,tic_tac_toe.boardc.rotate_plane_x.call(null,cljs.core.range.call(null,(27)),(1)));

return speclj.core.should_EQ_.call(null,plane_2,tic_tac_toe.boardc.rotate_plane_x.call(null,cljs.core.range.call(null,(27)),(2)));
})())),speclj.core.context.call(null,"rotate-cube-x",speclj.core.it.call(null,"makes a sideways board",speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(11),(20),(5),(14),(23),(8),(17),(26),(1),(10),(19),(4),(13),(22),(7),(16),(25),(0),(9),(18),(3),(12),(21),(6),(15),(24)], null),tic_tac_toe.boardc.rotate_cube_x.call(null,cljs.core.range.call(null,(27)))),speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(11),(20),(5),(14),(23),(8),(17),(26),(1),(10),(19),(4),(13),(22),(7),(16),(25),(0),(9),"X",(3),(12),(21),(6),(15),(24)], null),tic_tac_toe.boardc.rotate_cube_x.call(null,tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(18)], null),cljs.core.range.call(null,(27))))))),speclj.core.context.call(null,"rotate-plane-y",speclj.core.context.call(null,"3x3",speclj.core.it.call(null,"returns a 90 degree rotation of the board",speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(5),(8),(1),(4),(7),(0),(3),(6)], null),tic_tac_toe.boardc.rotate_plane_y.call(null,cljs.core.range.call(null,(9)))),speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(11),(14),(17),(10),(13),(16),(9),(12),(15)], null),tic_tac_toe.boardc.rotate_plane_y.call(null,cljs.core.drop.call(null,(9),cljs.core.range.call(null,(18))))),speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(23),(26),(19),(22),(25),(18),(21),(24)], null),tic_tac_toe.boardc.rotate_plane_y.call(null,cljs.core.drop.call(null,(18),cljs.core.range.call(null,(27))))))),speclj.core.context.call(null,"4x4",speclj.core.it.call(null,"returns a 90 degree rotation of the board",speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(7),(11),(15),(2),(6),(10),(14),(1),(5),(9),(13),(0),(4),(8),(12)], null),tic_tac_toe.boardc.rotate_plane_y.call(null,cljs.core.range.call(null,(16))))))),speclj.core.context.call(null,"rotate-cube-y",speclj.core.it.call(null,"returns whole board rotated 90 degrees on the y axis",speclj.core.should_EQ_.call(null,new cljs.core.PersistentVector(null, 27, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(5),(8),(1),(4),(7),(0),(3),(6),(11),(14),(17),(10),(13),(16),(9),(12),(15),(20),(23),(26),(19),(22),(25),(18),(21),(24)], null),tic_tac_toe.boardc.rotate_cube_y.call(null,cljs.core.range.call(null,(27)))))),speclj.core.context.call(null,"row-size",speclj.core.it.call(null,"returns 3 on 3x3 board",speclj.core.should_EQ_.call(null,(3),tic_tac_toe.boardc.get_row_size.call(null,cljs.core.range.call(null,(9))))),speclj.core.it.call(null,"returns 4 on 4x4 board",speclj.core.should_EQ_.call(null,(4),tic_tac_toe.boardc.get_row_size.call(null,cljs.core.range.call(null,(16)))))),speclj.core.context.call(null,"win? - 2d",speclj.core.context.call(null,"rows",speclj.core.it.call(null,"matching 3 horizontals is a win on 3 x 3 board",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(2)], null),cljs.core.range.call(null,(9))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(4),(5)], null),cljs.core.range.call(null,(9))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(6),(7),(8)], null),cljs.core.range.call(null,(9)))))),speclj.core.it.call(null,"matching 4 horizontals is a win on 4 x 4 board",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(2),(3)], null),cljs.core.range.call(null,(16))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(4),(5),(6),(7)], null),cljs.core.range.call(null,(16))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(8),(9),(10),(11)], null),cljs.core.range.call(null,(16))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(12),(13),(14),(15)], null),cljs.core.range.call(null,(16)))))),speclj.core.it.call(null,"3x3 win doesn't count for 4x4 board",speclj.core.should_not.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(2)], null),cljs.core.range.call(null,(16))))),speclj.core.should_not.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(4),(5)], null),cljs.core.range.call(null,(16))))),speclj.core.should_not.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(6),(7),(8)], null),cljs.core.range.call(null,(16))))))),speclj.core.context.call(null,"columns",speclj.core.it.call(null,"Matching 3 verticals is a win on a 3x3 board",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(3),(6)], null),cljs.core.range.call(null,(9))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(4),(7)], null),cljs.core.range.call(null,(9))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(5),(8)], null),cljs.core.range.call(null,(9)))))),speclj.core.it.call(null,"matching 4 horizontals is a win on 4 x 4 board",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(4),(8),(12)], null),cljs.core.range.call(null,(16))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(5),(9),(13)], null),cljs.core.range.call(null,(16))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(6),(10),(14)], null),cljs.core.range.call(null,(16))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(7),(11),(15)], null),cljs.core.range.call(null,(16)))))),speclj.core.it.call(null,"3x3 win doesn't count for 4 x 4 board",speclj.core.should_not.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(3),(6)], null),cljs.core.range.call(null,(16))))),speclj.core.should_not.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(4),(7)], null),cljs.core.range.call(null,(16))))),speclj.core.should_not.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(5),(8)], null),cljs.core.range.call(null,(16))))))),speclj.core.context.call(null,"diagonal",speclj.core.it.call(null,"matching diagonals are a win for 3 x 3",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(4),(8)], null),cljs.core.range.call(null,(9))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(4),(6)], null),cljs.core.range.call(null,(9)))))),speclj.core.it.call(null,"matching diagonals are a win for 4 x 4",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(5),(10),(15)], null),cljs.core.range.call(null,(16))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(6),(9),(12)], null),cljs.core.range.call(null,(16)))))),speclj.core.it.call(null,"3x3 win doesn't count for 4 x 4 board",speclj.core.should_not.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(4),(8)], null),cljs.core.range.call(null,(16))))),speclj.core.should_not.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(4),(6)], null),cljs.core.range.call(null,(16)))))))),speclj.core.context.call(null,"win? 3-D",speclj.core.context.call(null,"forward-facing",speclj.core.context.call(null,"rows",speclj.core.it.call(null,"matching any row on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(2)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(4),(5)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(6),(7),(8)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching any row on plane 1 is a win.",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(9),(10),(11)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(12),(13),(14)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(15),(16),(17)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching any row on plane 2 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(18),(19),(20)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(21),(22),(23)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(24),(25),(26)], null),cljs.core.range.call(null,(27))))))),speclj.core.context.call(null,"columns",speclj.core.it.call(null,"matching any column on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(3),(6)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(4),(7)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(5),(8)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching any column on plane 1 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(9),(12),(15)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(10),(13),(16)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(11),(14),(17)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching any column on plane 2 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(18),(21),(24)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(19),(22),(25)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(23),(26)], null),cljs.core.range.call(null,(27))))))),speclj.core.context.call(null,"diagonals",speclj.core.it.call(null,"matching any diagonal on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(4),(8)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(4),(6)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching any diagonal on plane 1 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(9),(13),(17)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(15),(13),(11)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching any diagonal on plane 2 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(18),(22),(26)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(24),(22),(20)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching diagonal 'skewers' count as a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(13),(26)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(13),(24)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(6),(13),(20)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(8),(13),(18)], null),cljs.core.range.call(null,(27)))))))),speclj.core.context.call(null,"side-ways facing",speclj.core.context.call(null,"rows",speclj.core.it.call(null,"matching row on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(18),(9),(0)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(21),(12),(3)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(24),(15),(6)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching row on plane 1 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(19),(10),(1)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(22),(13),(4)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(22),(13),(4)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching row on plane 2 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(11),(2)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(23),(14),(5)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(26),(17),(8)], null),cljs.core.range.call(null,(27))))))),speclj.core.context.call(null,"diagonals",speclj.core.it.call(null,"matching diagonal on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(18),(12),(6)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(12),(24)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching diagonal on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(19),(13),(7)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(13),(25)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching diagonal on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(14),(8)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(14),(26)], null),cljs.core.range.call(null,(27))))))),speclj.core.context.call(null,"columns",speclj.core.it.call(null,"matching columns on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(5),(8)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(11),(14),(17)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(23),(26)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching columns on plane 1 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(10),(19)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(10),(13),(16)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(19),(22),(25)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching columns on plane 2 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(3),(6)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(9),(12),(15)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(18),(21),(24)], null),cljs.core.range.call(null,(27)))))))),speclj.core.context.call(null,"bottom-up facing",speclj.core.context.call(null,"rows",speclj.core.it.call(null,"matching rows on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(8),(17),(26)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(7),(16),(25)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(6),(15),(24)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching rows on plane 1 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(5),(14),(23)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(4),(13),(22)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(3),(12),(21)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching rows on plane 2 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(11),(20)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(10),(19)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(9),(18)], null),cljs.core.range.call(null,(27))))))),speclj.core.context.call(null,"diagonals",speclj.core.it.call(null,"matching diagonals on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(8),(16),(24)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(26),(16),(6)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching diagonals on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(5),(13),(21)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(23),(13),(3)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching diagonals on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(10),(18)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(10),(0)], null),cljs.core.range.call(null,(27))))))),speclj.core.context.call(null,"columns",speclj.core.it.call(null,"matching columns on plane 0 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(8),(7),(6)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(17),(16),(15)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(26),(25),(24)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching columns on plane 1 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(5),(4),(3)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(14),(13),(12)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(23),(22),(21)], null),cljs.core.range.call(null,(27)))))),speclj.core.it.call(null,"matching columns on plane 2 is a win",speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(2),(1),(0)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(11),(10),(9)], null),cljs.core.range.call(null,(27))))),speclj.core.should.call(null,tic_tac_toe.boardc.win_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(20),(19),(18)], null),cljs.core.range.call(null,(27)))))))),speclj.core.context.call(null,"no-moves?",speclj.core.it.call(null,"checks if theres no available moves on 2d board",speclj.core.should.call(null,tic_tac_toe.boardc.no_moves_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X","O","O","O","X","X","X","X","O"], null))),speclj.core.should.call(null,tic_tac_toe.boardc.no_moves_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["O","X","X","X","X","O","O","O","X"], null))),speclj.core.should.call(null,tic_tac_toe.boardc.no_moves_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["O","X","X","X","X","O","O","O","X"], null))),speclj.core.should_not.call(null,tic_tac_toe.boardc.no_moves_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["O","X","X","X","X","O","O",(7),"X"], null)))),speclj.core.it.call(null,"checks if there is no available moves on a 3d board",speclj.core.should.call(null,tic_tac_toe.boardc.no_moves_QMARK_.call(null,cljs.core.repeat.call(null,(27),"X"))),speclj.core.should_not.call(null,tic_tac_toe.boardc.no_moves_QMARK_.call(null,cljs.core.conj.call(null,cljs.core.repeat.call(null,(27),"X"),(0)))))),speclj.core.context.call(null,"Draw?",speclj.core.it.call(null,"returns false if x has won",speclj.core.should_not.call(null,tic_tac_toe.boardc.draw_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X","X","X","O","O",(5),(6),(7),(8)], null)))),speclj.core.it.call(null,"returns false if o has won",speclj.core.should_not.call(null,tic_tac_toe.boardc.draw_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["O","O","O","X","X",(5),"X",(7),(8)], null)))),speclj.core.it.call(null,"returns false if game isn't over",speclj.core.should_not.call(null,tic_tac_toe.boardc.draw_QMARK_.call(null,cljs.core.range.call(null,(9))))),speclj.core.it.call(null,"returns true if no moves left, and no winners",speclj.core.should.call(null,tic_tac_toe.boardc.draw_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X","X","O","O","O","X","X","O","X"], null))))),speclj.core.context.call(null,"game-over?",speclj.core.it.call(null,"returns true if draw",speclj.core.should.call(null,tic_tac_toe.boardc.game_over_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X","O","X","O","X","O","O","X","O"], null)))),speclj.core.it.call(null,"returns true if win",speclj.core.should.call(null,tic_tac_toe.boardc.game_over_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["O",(1),(2),(3),"O",(5),(6),(7),"O"], null)))),speclj.core.it.call(null,"returns true if loss",speclj.core.should.call(null,tic_tac_toe.boardc.game_over_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),"O",(3),"O",(5),"O",(7),(8)], null)))),speclj.core.it.call(null,"returns false if not win, loss, or draw.",speclj.core.should_not.call(null,tic_tac_toe.boardc.game_over_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(2),(3),"O",(5),"O",(7),(8)], null))))),speclj.core.context.call(null,"create-board",speclj.core.it.call(null,"creates a 3x3 board",speclj.core.should_EQ_.call(null,cljs.core.range.call(null,(9)),tic_tac_toe.boardc.create_board.call(null,new cljs.core.Keyword(null,"3x3","3x3",570362544)))),speclj.core.it.call(null,"creates a 3x3 board",speclj.core.should_EQ_.call(null,cljs.core.range.call(null,(16)),tic_tac_toe.boardc.create_board.call(null,new cljs.core.Keyword(null,"4x4","4x4",121507723)))),speclj.core.it.call(null,"creates a 3x3 board",speclj.core.should_EQ_.call(null,cljs.core.range.call(null,(27)),tic_tac_toe.boardc.create_board.call(null,new cljs.core.Keyword(null,"3x3x3","3x3x3",1381331540))))),speclj.core.context.call(null,"get-middle",speclj.core.it.call(null,"returns 4 for a 3x3",speclj.core.should_EQ_.call(null,(4),tic_tac_toe.boardc.get_middle.call(null,cljs.core.range.call(null,(9))))),speclj.core.it.call(null,"returns 13 for a 3x3x3",speclj.core.should_EQ_.call(null,(13),tic_tac_toe.boardc.get_middle.call(null,cljs.core.range.call(null,(27))))),speclj.core.it.call(null,"returns nil for a 4x4",speclj.core.should_EQ_.call(null,null,tic_tac_toe.boardc.get_middle.call(null,cljs.core.range.call(null,(16)))))),speclj.core.context.call(null,"middle-available?",speclj.core.it.call(null,"returns true if available on 3x3",speclj.core.should.call(null,tic_tac_toe.boardc.middle_available_QMARK_.call(null,cljs.core.range.call(null,(9))))),speclj.core.it.call(null,"returns false if not available on 3x3",speclj.core.should_not.call(null,tic_tac_toe.boardc.middle_available_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(2),(3),"X",(5),(6),(7),(8)], null)))),speclj.core.it.call(null,"returns true if available on 3x3x3",speclj.core.should.call(null,tic_tac_toe.boardc.middle_available_QMARK_.call(null,cljs.core.range.call(null,(27))))),speclj.core.it.call(null,"returns false if not available on 3x3x3",(function (){var board = cljs.core.range.call(null,(27));
var middle = tic_tac_toe.boardc.get_middle.call(null,board);
return speclj.core.should_not.call(null,tic_tac_toe.boardc.middle_available_QMARK_.call(null,tic_tac_toe.spec_helperc.populate_board.call(null,"O",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [middle], null),board)));
})()),speclj.core.it.call(null,"returns false if on a board with out a middle",speclj.core.should_not.call(null,tic_tac_toe.boardc.middle_available_QMARK_.call(null,cljs.core.range.call(null,(16)))))),speclj.core.context.call(null,"win-next-turn?",speclj.core.it.call(null,"returns true for win from x in next turn",speclj.core.should.call(null,tic_tac_toe.boardc.win_next_turn_QMARK_.call(null,"X",new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X","X",(2),"O","O",(5),(6),(7),(8)], null)))),speclj.core.it.call(null,"returns true for win from o in next turn",speclj.core.should.call(null,tic_tac_toe.boardc.win_next_turn_QMARK_.call(null,"O",new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X",(1),(2),"O","O",(5),"X",(7),(8)], null)))),speclj.core.it.call(null,"returns false if win can't be made in next turn by player",speclj.core.should_not.call(null,tic_tac_toe.boardc.win_next_turn_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"X",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0)], null),cljs.core.range.call(null,(9))))),speclj.core.should_not.call(null,tic_tac_toe.boardc.win_next_turn_QMARK_.call(null,"X",tic_tac_toe.spec_helperc.populate_board.call(null,"O",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0)], null),cljs.core.range.call(null,(9))))))),speclj.core.context.call(null,"lose-next-turn?",speclj.core.it.call(null,"returns true if there is a win for opponent in next turn",speclj.core.should.call(null,tic_tac_toe.boardc.lose_next_turn_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X",(1),(2),"O","O",(5),(6),"X","X"], null)))),speclj.core.it.call(null,"returns false if there is not a win for opponent in next turn",speclj.core.should_not.call(null,tic_tac_toe.boardc.lose_next_turn_QMARK_.call(null,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, ["X",(1),(2),(3),(4),(5),(6),(7),(8)], null))))),speclj.core.context.call(null,"get-random-available",speclj.core.with_stubs.call(null),speclj.core.redefs_around.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.rand_nth,speclj.core.stub.call(null,new cljs.core.Keyword(null,"rand-nth","rand-nth",1426715838),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"invoke","invoke",1145927159),cljs.core.first], null))], null)),speclj.core.it.call(null,"returns a random available move",speclj.core.should_EQ_.call(null,(0),tic_tac_toe.boardc.get_random_available.call(null,cljs.core.range.call(null,(9))))))));

//# sourceMappingURL=boardc_spec.js.map
