// Compiled by ClojureScript 1.11.132 {:optimizations :none}
goog.provide('tic_tac_toe.moves.replayc_spec');
goog.require('cljs.core');
goog.require('speclj.core');
goog.require('tic_tac_toe.moves.replayc');
speclj.core.describe.call(null,"replay -move",speclj.core.with_stubs.call(null),speclj.core.redefs_around.call(null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tic_tac_toe.moves.replayc.thread_sleep,speclj.core.stub.call(null,new cljs.core.Keyword(null,"sleep","sleep",-1932665860))], null)),speclj.core.context.call(null,"get-replay-move",speclj.core.it.call(null,"returns the first of the moves",speclj.core.should_EQ_.call(null,(0),tic_tac_toe.moves.replayc.get_replay_move.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"replay-moves","replay-moves",1560924210),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(2),(3)], null)], null))),speclj.core.should_EQ_.call(null,(1),tic_tac_toe.moves.replayc.get_replay_move.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"replay-moves","replay-moves",1560924210),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),(2),(3)], null)], null)))),speclj.core.it.call(null,"invokes thread sleep to make a delay between moves",tic_tac_toe.moves.replayc.get_replay_move.call(null,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,"replay-moves","replay-moves",1560924210),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),(1),(2),(3)], null)], null)),speclj.core.should_have_invoked.call(null,new cljs.core.Keyword(null,"sleep","sleep",-1932665860)))));

//# sourceMappingURL=replayc_spec.js.map
